-- Script: loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "DIG GUI",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local Tab = Window:CreateTab("Toggles", 4483362458) -- Title, Image
local Slider = Tab:CreateSlider({
   Name = "CD",
   Range = {0, 10},
   Increment = 0.5,
   Suffix = "Seconds",
   CurrentValue = 2,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
    CDSlider = Value
   end,
})

local Button = Tab:CreateButton({
   Name = "Insta Dig",
   Callback = function()
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local backpack = player:WaitForChild("Backpack")
      local tool = nil

      local shovelFolder = game:GetService("ReplicatedStorage"):WaitForChild("PlayerItems"):WaitForChild("Shovels")
      for _, shovel in pairs(shovelFolder:GetChildren()) do
         local shovelName = shovel.Name
         local foundTool = backpack:FindFirstChild(shovelName)
         if foundTool and foundTool:IsA("Tool") then
            foundTool.Parent = character -- Equip it
            tool = foundTool
            break
         end
      end

      if not tool then
         print("No valid shovel found in Backpack matching PlayerItems.Shovels!")
         return
      end
      if tool then
         tool:Activate()
         wait(CDSlider)
         local args = {
            0,
            {}
         }
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Dig_Finished"):FireServer(unpack(args))
      end
   end,
})

local Button = Tab:CreateButton({
   Name = "Sell All",
   Callback = function()
local args = {
	workspace:WaitForChild("World"):WaitForChild("NPCs"):WaitForChild("Rocky")
}
game:GetService("ReplicatedStorage"):WaitForChild("DialogueRemotes"):WaitForChild("SellAllItems"):FireServer(unpack(args))
   end,
})

local Button = Tab:CreateButton({
   Name = "Appraise",
   Callback = function()
game:GetService("ReplicatedStorage"):WaitForChild("DialogueRemotes"):WaitForChild("Appraiser_Appraise"):InvokeServer()
   end,
})

local Button = Tab:CreateButton({
   Name = "Infinite Yield",
   Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})
