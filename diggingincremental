local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Main")
local Divider = Tab:CreateDivider()

local Scripts = Window:CreateTab("Scripts", 4483362458)
local ScriptsSection = Scripts:CreateSection("Scripts")
local ScriptsDivider = Scripts:CreateDivider()

-- Variables to track toggle states and selections
local autoDig = false
local autoRoll = false
local upgradesSelected = {}
local autoUpgrade = false
local rebirthUpgradesSelected = {}
local autoRebirthUpgrade = false
local autoRebirth = false

-- Reference to ReplicatedStorage and Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)

-- Helper function to safely fire a remote
local function safeFireRemote(remoteName, ...)
   if Remotes then
      local remote = Remotes:FindFirstChild(remoteName)
      if remote then
         remote:FireServer(...)
      else
         warn("Remote '" .. remoteName .. "' not found.")
      end
   else
      warn("Remotes folder not found in ReplicatedStorage.")
   end
end

-- Dropdown for Upgrades
local Dropdown1 = Tab:CreateDropdown({
   Name = "Upgrades",
   Options = {"1", "2", "3", "4"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "UpgradesSelected",
   Callback = function(Options)
      upgradesSelected = Options -- Update the selected upgrades table
   end,
})

-- Toggle for Auto Upgrade
local Toggle1 = Tab:CreateToggle({
   Name = "Auto Upgrade",
   CurrentValue = false,
   Flag = "AutoUpgrade",
   Callback = function(Value)
      autoUpgrade = Value
      if autoUpgrade then
         spawn(function()
            while autoUpgrade do
               for _, upgrade in ipairs(upgradesSelected) do
                  safeFireRemote("Upgrade", "DirtUpgrades", tonumber(upgrade), 1)
               end
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Divider2 = Tab:CreateDivider()

-- Dropdown for Rebirth Upgrades
local Dropdown2 = Tab:CreateDropdown({
   Name = "Rebirth Upgrades",
   Options = {"1", "2", "3", "4"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "RebirthUpgradesSelected",
   Callback = function(Options)
      rebirthUpgradesSelected = Options -- Update the selected rebirth upgrades table
   end,
})

-- Toggle for Auto Rebirth Upgrade
local Toggle2 = Tab:CreateToggle({
   Name = "Auto Rebirth Upgrade",
   CurrentValue = false,
   Flag = "AutoRebirthUpgrade",
   Callback = function(Value)
      autoRebirthUpgrade = Value
      if autoRebirthUpgrade then
         spawn(function()
            while autoRebirthUpgrade do
               for _, upgrade in ipairs(rebirthUpgradesSelected) do
                  safeFireRemote("Upgrade", "RebirthUpgrades", tonumber(upgrade), 1)
               end
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Divider3 = Tab:CreateDivider()

-- Toggle for Auto Rebirth
local Toggle3 = Tab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "AutoRebirth",
   Callback = function(Value)
      autoRebirth = Value
      if autoRebirth then
         spawn(function()
            while autoRebirth do
               safeFireRemote("Rebirth")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

-- Toggle for Auto Dig
local Toggle4 = Tab:CreateToggle({
   Name = "Auto Dig",
   CurrentValue = false,
   Flag = "AutoDig",
   Callback = function(Value)
      autoDig = Value
      if autoDig then
         spawn(function()
            while autoDig do
               safeFireRemote("Dig")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

-- Toggle for Auto Dig
local Toggle5 = Tab:CreateToggle({
   Name = "Auto Roll",
   CurrentValue = false,
   Flag = "AutoRoll",
   Callback = function(Value)
      autoRoll = Value
      if autoRoll then
         spawn(function()
            while autoRoll do
               safeFireRemote("RarityRoll")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Button1 = Scripts:CreateButton({
   Name = "Infinite Yield",
   Callback = function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})
