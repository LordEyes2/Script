local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
-- loadstring: loadstring(game:HttpGet('https://raw.githubusercontent.com/LordEyes2/Script/refs/heads/main/diggingincremental'))()

local Window = Rayfield:CreateWindow({
   Name = "Personal Hub V3.0",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Main")
local Divider = Tab:CreateDivider()

local Admin = Window:CreateTab("Admin", 4483362458)
local AdminSection = Admin:CreateSection("Admin")
local AdminDivider = Admin:CreateDivider()

local Scripts = Window:CreateTab("Scripts", 4483362458)
local ScriptsSection = Scripts:CreateSection("Scripts")
local ScriptsDivider = Scripts:CreateDivider()

-- Variables to track toggle states and selections
local autoDig = false
local autoRoll = false
local upgradesSelected = {}
local autoUpgrade = false
local rebirthUpgradesSelected = {}
local autoRebirthUpgrade = false
local autoRebirth = false

-- Reference to ReplicatedStorage and Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)

-- Helper function to safely fire a remote
local function safeFireRemote(remoteName, ...)
   if Remotes then
      local remote = Remotes:FindFirstChild(remoteName)
      if remote then
         remote:FireServer(...)
      else
         warn("Remote '" .. remoteName .. "' not found.")
      end
   else
      warn("Remotes folder not found in ReplicatedStorage.")
   end
end

-- Dropdown for Upgrades
local Dropdown1 = Tab:CreateDropdown({
   Name = "Upgrades",
   Options = {"1", "2", "3", "4"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "UpgradesSelected",
   Callback = function(Options)
      upgradesSelected = Options -- Update the selected upgrades table
   end,
})

-- Toggle for Auto Upgrade
local Toggle1 = Tab:CreateToggle({
   Name = "Auto Upgrade",
   CurrentValue = false,
   Flag = "AutoUpgrade",
   Callback = function(Value)
      autoUpgrade = Value
      if autoUpgrade then
         spawn(function()
            while autoUpgrade do
               for _, upgrade in ipairs(upgradesSelected) do
                  safeFireRemote("Upgrade", "DirtUpgrades", tonumber(upgrade), 1)
               end
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Divider2 = Tab:CreateDivider()

-- Dropdown for Rebirth Upgrades
local Dropdown2 = Tab:CreateDropdown({
   Name = "Rebirth Upgrades",
   Options = {"1", "2", "3", "4"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "RebirthUpgradesSelected",
   Callback = function(Options)
      rebirthUpgradesSelected = Options -- Update the selected rebirth upgrades table
   end,
})

-- Toggle for Auto Rebirth Upgrade
local Toggle2 = Tab:CreateToggle({
   Name = "Auto Rebirth Upgrade",
   CurrentValue = false,
   Flag = "AutoRebirthUpgrade",
   Callback = function(Value)
      autoRebirthUpgrade = Value
      if autoRebirthUpgrade then
         spawn(function()
            while autoRebirthUpgrade do
               for _, upgrade in ipairs(rebirthUpgradesSelected) do
                  safeFireRemote("Upgrade", "RebirthUpgrades", tonumber(upgrade), 1)
               end
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Divider3 = Tab:CreateDivider()

-- Toggle for Auto Rebirth
local Toggle3 = Tab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "AutoRebirth",
   Callback = function(Value)
      autoRebirth = Value
      if autoRebirth then
         spawn(function()
            while autoRebirth do
               safeFireRemote("Rebirth")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

-- Toggle for Auto Dig
local Toggle4 = Tab:CreateToggle({
   Name = "Auto Dig",
   CurrentValue = false,
   Flag = "AutoDig",
   Callback = function(Value)
      autoDig = Value
      if autoDig then
         spawn(function()
            while autoDig do
               safeFireRemote("Dig")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

-- Toggle for Auto Dig
local Toggle5 = Tab:CreateToggle({
   Name = "Auto Roll",
   CurrentValue = false,
   Flag = "AutoRoll",
   Callback = function(Value)
      autoRoll = Value
      if autoRoll then
         spawn(function()
            while autoRoll do
               safeFireRemote("RarityRoll")
               task.wait(0.1) -- Small delay to prevent server overload
            end
         end)
      end
   end,
})

local Button1 = Scripts:CreateButton({
   Name = "Infinite Yield",
   Callback = function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
   end,
})

-- ADMIN SHIT --
-- Variables to track selections
local selectedPlayer = nil
local selectedOption = nil
local selectedStat = nil
local statAmount = nil

-- Reference to Players and ReplicatedStorage services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)

-- Helper function to safely fire the Admin remote
local function safeFireAdminRemote(action, playerName, stat, amount)
   if Remotes then
      local adminRemote = Remotes:FindFirstChild("Admin")
      if adminRemote then
         adminRemote:FireServer(action, playerName, stat, amount)
      else
         warn("Admin remote not found in ReplicatedStorage.Remotes")
      end
   else
      warn("Remotes folder not found in ReplicatedStorage")
   end
end

-- Helper function to get the list of player names
local function getPlayerNames()
   local playerNames = {}
   for _, player in ipairs(Players:GetPlayers()) do
      table.insert(playerNames, player.Name)
   end
   return playerNames
end

-- Dropdown for selecting a player
local Dropdown3 = Admin:CreateDropdown({
   Name = "Selected Player",
   Options = getPlayerNames(), -- Initialize with current players
   CurrentOption = nil,
   MultipleOptions = false,
   Flag = "SelectedPlayer",
   Callback = function(Option)
      selectedPlayer = Option[1] -- Extract the first (and only) selected player as a string
   end,
})

-- Update player dropdown when players join or leave
Players.PlayerAdded:Connect(function()
   Dropdown3:SetOptions(getPlayerNames()) -- Refresh player list
end)
Players.PlayerRemoving:Connect(function()
   Dropdown3:SetOptions(getPlayerNames()) -- Refresh player list
end)

-- Dropdown for selecting an option (Set Stat or Stat Reset)
local Dropdown4 = Admin:CreateDropdown({
   Name = "Selected Option",
   Options = {"Set Stat", "Stat Reset"},
   CurrentOption = nil,
   MultipleOptions = false,
   Flag = "SelectedOption",
   Callback = function(Option)
      selectedOption = Option[1] -- Extract the first (and only) selected option as a string
   end,
})

-- Dropdown for selecting a stat
local Dropdown5 = Admin:CreateDropdown({
   Name = "Selected Stat",
   Options = {"Dirt", "Exp", "Level", "Oil", "Rarity", "Rebirths", "DiggingSpeed", "DirtLuck", "DirtValue", "ExpMulti", "RebirthMult", "DigLuck", "DigSpeed", "GamepassPack", "RarityLuck", "Reincarnation", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"},
   CurrentOption = nil,
   MultipleOptions = false,
   Flag = "SelectedStat",
   Callback = function(Option)
      selectedStat = Option[1] -- Extract the first (and only) selected stat as a string
   end,
})

-- Input for stat amount (unchanged since it works)
local Input1 = Admin:CreateInput({
   Name = "Stat Amount",
   CurrentValue = "",
   PlaceholderText = "None",
   RemoveTextAfterFocusLost = false,
   Flag = "InputAmount",
   Callback = function(Text)
      statAmount = Text -- Store input as a number (nil if invalid)
   end,
})

-- Button to execute the action
local Button2 = Admin:CreateButton({
   Name = "Execute",
   Callback = function()
      -- Validate selections
      if not selectedPlayer then
         warn("No player selected")
         return
      end
      if not selectedOption then
         warn("No option selected")
         return
      end
      if not selectedStat then
         warn("No stat selected")
         return
      end
      if selectedOption == "Set Stat" and not statAmount then
         warn("Invalid or missing stat amount")
         return
      end

      -- Execute the appropriate action
      local action = (selectedOption == "Set Stat") and "Stat" or "Reset"
      local amount = (selectedOption == "Set Stat") and statAmount or 0
      safeFireAdminRemote(action, selectedPlayer, selectedStat, amount)
   end,
})
