local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Grow A Garden",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Script Loading...",
   LoadingSubtitle = "by Lord_Eyes",
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Rizzy Hub",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "KeyRizzyHub777", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"gIQ3jOxSzv", "pZI6qJzq1m", "LiHg2YPlE4", "`3#Y^M8#2#&m>Uj4i(zWN!OF@u7:%"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local OwnerName = game.Players.LocalPlayer.Character
local Player = game.Players.LocalPlayer
local OwnerPlot = nil
local function findOwner()
    for _, child in ipairs(game.Workspace.Farm:GetChildren()) do
        for _, subchild in ipairs(child:GetChildren()) do
            for _, subsubchild in ipairs(subchild:GetChildren()) do
                if subsubchild.Name == "Data" then
                    if subsubchild:FindFirstChild("Owner") and subsubchild.Owner.Value == game.Players.LocalPlayer.Name then
                        OwnerPlot = subsubchild.Owner
                        print("‚úÖ Found OwnerPlot:", OwnerPlot.Name)
                        return
                    end
                end
            end
        end
    end
end


findOwner()
local GrabTable = {}
local RarityTable = {}
local BuyTable = {}
local BuyTable2 = {}
local holdablemax = 50
local autoBuy = false
local autoSellEnabled = false
local autoCollect = false
local autoBuyEggs = false
local EggTypeTable = {}
local collectMoonlit = false
local collectMoonlitTurnIn = false

local Main = Window:CreateTab("Autofarm", 4483362458)
--local Auto = Window:CreateTab("Autofarm", 4483362458)
local Event = Window:CreateTab("Event", 4483362458)
local Settings = Window:CreateTab("Settings", 4483362458)


local Button2 = Event:CreateButton({
   Name = "Open Easter Shop (Broken)",
   Callback = function()
   if Player.PlayerGui.Easter_Shop.Enabled == false then
   Player.PlayerGui.Easter_Shop.Enabled = true
   else
   Player.PlayerGui.Easter_Shop.Enabled = false
   end
   end,
})

local Toggle23 = Event:CreateToggle({
   Name = "Collect Moonlit",
   CurrentValue = false,
   Flag = "Toggle6",
   Callback = function(Value)
       collectMoonlit = Value
       print("üåô Collect Moonlit Enabled:", Value)

       if collectMoonlit then
           task.spawn(function()
               while collectMoonlit do
                   if OwnerPlot and OwnerPlot.Parent.Parent.Parent:FindFirstChild("Important") then
                       local phys = OwnerPlot.Parent.Parent.Parent.Important:FindFirstChild("Plants_Physical")
                       if phys then
                           for _, plantType in ipairs(phys:GetChildren()) do
                               -- Try to find Fruits folder
                               local fruits = plantType:FindFirstChild("Fruits")
                               local roots = {}

                               -- If there is no Fruits folder, use plantType's direct children
                               if fruits then
                                   roots = fruits:GetChildren()
                                   --print("üü¢ Found Fruits folder for", plantType.Name)
                               else
                                   roots = plantType:GetChildren() -- Use direct children if no Fruits folder
                                   --print("üü† No Fruits folder, using direct children for", plantType.Name)
                                   
                               end

                               -- Loop through roots (fruits or direct children)
                               for _, fruit in ipairs(roots) do
                                   -- Print for debugging
                                   --print("üîç Checking fruit:", fruit.Name)

                                   -- Check if the Moonlit attribute is on the fruit model itself (not descendants)
                                   local isMoonlit = nil
                                   if not fruits then
                                    isMoonlit = plantType:GetAttribute("Moonlit")
                                    else
                                    isMoonlit = fruit:GetAttribute("Moonlit")
                                    end
                                   if isMoonlit == true then
                                       --print("üåô Found Moonlit fruit:", fruit.Name)
                                            Rayfield:Notify({
                                            Title = "Moonlit plant!",
                                            Content = "There is a Moonlit plant somewhere! This will keep notifying until grabbed.",
                                            Duration = 6.5,
                                            Image = 4483362458,
                                            })
                                       -- Look for ProximityPrompt in all descendants of this fruit
                                       local foundPrompt = false
                                       for _, descendant in ipairs(fruit:GetDescendants()) do
                                           if descendant:IsA("ProximityPrompt") then
                                               fireproximityprompt(descendant)
                                               print("üåô Collected Moonlit item:", fruit.Name, "via", descendant:GetFullName())
                                               foundPrompt = true
                                               break
                                           end
                                       end

                                       if not foundPrompt then
                                           --print("‚ö†Ô∏è No ProximityPrompt found for Moonlit fruit:", fruit.Name)
                                       end
                                   else
                                       --print("üåô Not Moonlit:", fruit.Name)
                                   end
                               end
                           end
                       else
                           warn("‚ùå Plants_Physical not found!")
                       end
                   else
                       warn("‚ùå OwnerPlot not found or missing Important folder")
                   end

                   task.wait(1.5)
               end
               print("‚õî Collect Moonlit stopped.")
           end)
       end
   end,
})

local Toggle73 = Event:CreateToggle({
   Name = "Turn In Moonlit",
   CurrentValue = false,
   Flag = "Toggle312",
   Callback = function(Value)
       collectMoonlitTurnIn = Value
       print("üåô Turn In Moonlit Enabled:", Value)

       if collectMoonlitTurnIn then
           task.spawn(function()
               local questEvent = game:GetService("ReplicatedStorage")
                                   :WaitForChild("GameEvents")
                                   :WaitForChild("NightQuestRemoteEvent")
               while collectMoonlitTurnIn do
                   local backpack = Player:FindFirstChild("Backpack")
                   local submitted = false

                   if backpack then
                       for _, item in ipairs(backpack:GetChildren()) do
                           if item:GetAttribute("Moonlit") == true and item:IsA("Tool") then
                               -- Equip the tool
                               local humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
                               if humanoid then
                                   humanoid:EquipTool(item)
                                   task.wait(0.2)  -- give it a moment to equip
                               end

                               -- Submit it
                               questEvent:FireServer("SubmitHeldPlant")
                               print("üåô Submitted Moonlit item:", item.Name)

                               submitted = true
                               break  -- only one per loop
                           end
                       end

                       if not submitted then
                           warn("‚ö†Ô∏è No more Moonlit items found to turn in.")
                           break  -- exit loop early if nothing left
                       end
                   else
                       warn("‚ùå Backpack not found.")
                       break
                   end

                   task.wait(1)  -- small delay before next submission
               end

               print("‚õî Turn In Moonlit stopped.")
           end)
       end
   end,
})


local Section = Settings:CreateSection("Auto Grab Settings")
local Divider = Settings:CreateDivider()

-- Get fruit types dynamically from ReplicatedStorage
local fruitOptions = {}
table.insert(fruitOptions, "Carrot")
table.insert(fruitOptions, "Bamboo")
table.insert(fruitOptions, "Mushroom")
table.insert(fruitOptions, "Orange Tulip")
table.insert(fruitOptions, "Daffodil")
table.insert(fruitOptions, "Watermelon")
table.insert(fruitOptions, "Pumpkin")
for _, fruit in ipairs(game.ReplicatedStorage:WaitForChild("Fruit_Spawn"):GetChildren()) do
    table.insert(fruitOptions, fruit.Name)
end

local Dropdown = Settings:CreateDropdown({
   Name = "Plants to Grab",
   Options = fruitOptions,
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "DropdownGrab",
   Callback = function(Options)
      GrabTable = Options
      print("‚úÖ Selected Plants:", table.concat(GrabTable, ", "))
   end,
})


local Dropdown2 = Settings:CreateDropdown({
   Name = "Raritys to Grab",
   Options = {"Gold", "Rainbow", "Normal"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "DropdownRarity", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   RarityTable = Options
   print("‚úÖ Selected Plants:", table.concat(RarityTable, ", "))
   end,
})

local Section2 = Settings:CreateSection("Auto Buy Settings")
local Divider2 = Settings:CreateDivider()

local Dropdown3 = Settings:CreateDropdown({
   Name = "Plants to Buy",
   Options = {"Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper", 'Cacao'},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "DropdownBuy",
   Callback = function(Options)
      BuyTable = Options
      print("‚úÖ Selected Plants:", table.concat(BuyTable, ", "))
   end,
})


local Dropdown4 = Settings:CreateDropdown({
   Name = "Gear to Buy",
   Options = {"Watering Can", "Trowel", "Basic Sprinkler", "Advanced Sprinkler", "Godly Sprinkler", "Lightning Rod", "Master Sprinkler", "Recall Wrench", "Favorite Tool"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "DropdownBuy2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   BuyTable2 = Options
   print("‚úÖ Selected Plants:", table.concat(BuyTable2, ", "))
   end,
})

local Dropdown5 = Settings:CreateDropdown({
   Name = "Egg Types to Buy",
   Options = {"Common Egg", "Uncommon Egg", "Rare Egg", "Legendary Egg", "Bug Egg"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "DropdownEggs",
   Callback = function(Options)
      EggTypeTable = Options
      print("ü•ö Selected Egg Types:", table.concat(EggTypeTable, ", "))
   end,
})


local Section3 = Settings:CreateSection("Auto Sell Settings")
local Divider3 = Settings:CreateDivider()

local Slider = Settings:CreateSlider({
   Name = "Sell Count",
   Range = {0, 100},
   Increment = 1,
   Suffix = "Items",
   CurrentValue = holdablemax,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   holdablemax = Value
   end,
})

local Section4 = Settings:CreateSection("Menu Settings")
local Divider4 = Settings:CreateDivider()

local Button = Settings:CreateButton({
   Name = "Delete UI",
   Callback = function()
 autoBuy = false
 autoSellEnabled = false
 autoCollect = false
 autoBuyEggs = false
 collectMoonlit = false
 collectMoonlitTurnIn = false
   Rayfield:Destroy()
   end,
})

-- Being added soon!
--[[
local Toggle = Main:CreateToggle({
   Name = "Auto Plant Seeds",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

   end,
})
]]--

local Toggle = Main:CreateToggle({
   Name = "Auto Collect Plants",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       autoCollect = Value
       print("üå± Auto Collect Activated:", Value)

       if autoCollect then
           task.spawn(function()
               while autoCollect do
                   --print("üîÅ Auto Collect loop running...")

                   -- Check if the Important folder exists
                   local important = OwnerPlot and OwnerPlot.Parent.Parent.Parent:FindFirstChild("Important")
                   if important then
                       local physicalPlants = important:FindFirstChild("Plants_Physical")
                       if physicalPlants then
                           for _, plantType in ipairs(physicalPlants:GetChildren()) do
                               if table.find(GrabTable, plantType.Name) then
                                   --print("‚úÖ Found plant:", plantType.Name)

                                   local roots = {}
                                   -- Check for Fruits folder first
                                   if plantType:FindFirstChild("Fruits") then
                                       -- The plant has a Fruits folder, use that
                                       roots = plantType.Fruits:GetChildren()
                                       --print("üü¢ Found Fruits folder for", plantType.Name)
                                   else
                                       -- The plant does not have a Fruits folder, use the plant directly
                                       roots = plantType:GetChildren()
                                       --print("üü† No Fruits folder, using direct children for", plantType.Name)
                                   end

                                   -- Check for ProximityPrompt in each root element
                                   for _, fruit in ipairs(roots) do
                                       --print("üîç Checking:", fruit.Name)

                                       -- Directly look for Variant under the plantType
                                       local variant = plantType:FindFirstChild("Variant")
                                       if variant then
                                           --print("üìù Variant found:", variant.Value)
                                           if table.find(RarityTable, variant.Value) then
                                               -- Look for ProximityPrompt under fruit
                                               local foundPrompt = false
                                               for _, desc in ipairs(fruit:GetDescendants()) do
                                                   if desc:IsA("ProximityPrompt") then
                                                       --print("üîò ProximityPrompt found:", desc.Name)
                                                       fireproximityprompt(desc)
                                                       foundPrompt = true
                                                       --print("‚úÖ Collected:", fruit.Name, "-", variant.Value)
                                                       break
                                                   end
                                               end

                                               if not foundPrompt then
                                                   --print("‚ö†Ô∏è No ProximityPrompt found in", fruit.Name)
                                               end
                                           else
                                               --print("‚ö†Ô∏è Variant not in RarityTable:", variant.Value)
                                           end
                                       else
                                           --print("‚ö†Ô∏è No Variant found directly under", plantType.Name)
                                       end
                                   end
                               end
                           end
                       end
                   else
                       print("‚ùå OwnerPlot not found or doesn't contain Important")
                   end

                   task.wait(1.5)
               end
               print("‚õî Auto Collect stopped.")
           end)
       end
   end,
})

local Toggle2 = Main:CreateToggle({
   Name = "Auto Buy",
   CurrentValue = false,
   Flag = "Toggle2",
   Callback = function(Value)
       autoBuy = Value
       print("üõí Auto Buy Enabled:", Value)

       if autoBuy then
           task.spawn(function()
               while autoBuy do
                   -- Buy Selected Fruits (Seeds)
                   if BuyTable then
                       for _, fruitName in ipairs(BuyTable) do
                           game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(fruitName)
                           --print("üå± Bought Seed:", fruitName)
                           task.wait(0.01)
                       end
                   end

                   -- Buy Selected Gear
                   if BuyTable2 then
                       for _, gearName in ipairs(BuyTable2) do
                           game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(gearName)
                           --print("üõ†Ô∏è Bought Gear:", gearName)
                           task.wait(0.01)
                       end
                   end

                   task.wait(0.01) -- Delay between buy loops
               end
               print("‚õî Auto Buy stopped.")
           end)
       end
   end,
})

local Toggle3 = Main:CreateToggle({
   Name = "Auto Buy Eggs",
   CurrentValue = false,
   Flag = "Toggle3",
   Callback = function(Value)
       autoBuyEggs = Value
       print("ü•ö Auto Buy Eggs Enabled:", Value)

       local eggPositions = {
           [1] = Vector3.new(-264.039, 2.798, 4.770),
           [2] = Vector3.new(-264.031, 2.798, 0.740),
           [3] = Vector3.new(-264.041, 2.876, -3.270),
       }

       if autoBuyEggs then
           task.spawn(function()
               while autoBuyEggs do
                   local eggFolder = game.Workspace:FindFirstChild("NPCS") and
                                     game.Workspace.NPCS:FindFirstChild("Pet Stand") and
                                     game.Workspace.NPCS["Pet Stand"]:FindFirstChild("EggLocations")

                   if eggFolder then
                       for _, egg in ipairs(eggFolder:GetChildren()) do
                           if table.find(EggTypeTable, egg.Name) then
                               local eggPos = egg:IsA("Model") and egg:FindFirstChild("PrimaryPart") and egg.PrimaryPart.Position
                               if not eggPos and egg:IsA("Model") then
                                   egg.PrimaryPart = egg:FindFirstChild("HitBox") -- fallback
                                   eggPos = egg.PrimaryPart and egg.PrimaryPart.Position
                               end
                               
                               if eggPos then
                                   for id, pos in pairs(eggPositions) do
                                       if (eggPos - pos).Magnitude < 1 then
                                           game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(id)
                                           --print("‚úÖ Bought", egg.Name, "Egg at slot", id)
                                           task.wait(0.5)
                                       end
                                   end
                               end
                           end
                           task.wait(0.1)
                       end
                   end
                   task.wait(1)
               end
               print("‚õî Auto Buy Eggs stopped.")
           end)
       end
   end,
})


local Toggle4 = Main:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Flag = "Toggle4",
    Callback = function(Value)
        autoSellEnabled = Value
        print("üå± Auto Sell:", Value)

        if autoSellEnabled then
            task.spawn(function()
                while autoSellEnabled do
                    local invFolder = Player:FindFirstChild("Backpack")
                    local holdableCount = 0

                    if invFolder then
                        for _, item in pairs(invFolder:GetChildren()) do
                            if item:GetAttribute("ITEM_TYPE") == "Holdable" then
                                holdableCount += 1
                            end
                        end
                    end

                    if holdableCount >= holdablemax then
                        local player = game.Players.LocalPlayer
                        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local hrp = player.Character.HumanoidRootPart
                            local originalCFrame = hrp.CFrame

                            -- Teleport to sell location
                            hrp.CFrame = CFrame.new(61.896236419677734, 2.999999761581421, 0.10269952565431595)
                            task.wait(0.5)

                            -- Sell
                            local sellEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
                            sellEvent:FireServer()
                            --print("‚úÖ Inventory sold!")

                            -- Teleport back
                            task.wait(0.5)
                            hrp.CFrame = originalCFrame
                        end
                    end

                    task.wait(2.5)
                end
            end)
        end
    end,
})
